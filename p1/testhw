#! /bin/bash

echo $1
testerDirectory="/home/ssdavis/60/p1/Testing"

if [ $# -ne 1 ]; then
  echo "usage testhw: testhw source_directory" 1>&2
  exit
fi

if [[ $1 =~ Testing ]]; then # Use from this directory is not allowed
  echo "You may not use Testing as your own source directory!"  1>&2
  exit
fi

cd $1
echo -n "Scores from p1 for " > results.txt

if [ -e authors.csv ]; then
  dos2unix -q authors.csv
  awk -F, '{printf"%s,%s ", $2, $3}' authors.csv >> results.txt
  awk -F, '{printf"%s,%s\n", $2, $3}' authors.csv > names.txt
  echo -e "\n\nNote that the format for authors.csv is: e-mail<comma>last name<comma>first name" >> results.txt
  echo "For example: ssdavis@ucdavis.edu,Davis,Sean"  >> results.txt
  awk -F, {'printf"%s ", $1'} authors.csv > addresses
else
  echo  "You need to create an authors.csv file!!!! No one will receive credit for this assignment"  >> results.txt
  echo "$1@ucdavis.edu" > addresses
  finger ${PWD##*/} | awk 'NR == 1 {printf"%s,%s", $NF, $4}' > names.txt
fi

echo -n "Addresses used: " >> results.txt
cat addresses >> results.txt
echo -e "\n" >> results.txt
TTScore=5
BalanceScore=0
BagsScore=0

rm a.out &> /dev/null
cp $testerDirectory/*.cpp $testerDirectory/*.h $testerDirectory/*.dat .

if [ ! -e timetest.cpp ]; then
  echo "timetest.cpp does not exist."  >> results.txt
  TTScore=0
else
  g++ timetest.cpp &> /dev/null

  if [[ ! -e a.out ]]; then # a.out not found
    TTScore=0
    echo "timetest.cpp does not compile!"  >> results.txt 
  else
    fileNum=1
    echo timetest.cpp operation testing:  >> results.txt
    echo timetest.cpp:
    while [[ $fileNum -lt 7 ]]; do
      echo $fileNum  1>&2
      echo -n "$fileNum: for " >> results.txt
      cat $testerDirectory/input$fileNum.txt >> results.txt
      rm -f out$fileNum.txt  
      (a.out < $testerDirectory/input$fileNum.txt | awk '/CPU/ {print int($6 * 100) }' | head -1 > out$fileNum.txt )&
      sleep 1
      pkill a.out >& /dev/null
      testTime=0
    
      if [ -e out$fileNum.txt ]; then
        testTime=`cat out$fileNum.txt`
      fi

      if [[ $testTime -gt 1 && $testTime -lt 100 ]]; then
        echo OK >> results.txt
      else
        echo "Not OK, CPU time outside acceptable range" >> results.txt
        (( TTScore-- ))
      fi

      (( fileNum++ ))
    done  # while less than 7
  fi # if timetest a.out
fi # if timetest.cpp exists

if [ $TTScore -lt 0 ]; then
  TTScore=0
fi

if [ -e bags.cpp ]; then
  rm -f a.out &> /dev/null
  g++ bags.cpp
  
  if [ -e a.out ]; then
    includeCount=`grep "#include" bags.cpp | wc -l`
    intCount=`grep -v "^ *//" bags.cpp | grep "[^ ]int " | wc -l`
    shortCount=`grep -v "^ *//" bags.cpp | grep '^ *short .*;' | grep -v "," | wc -l`  

    if [[ $includeCount -gt 5 || $intCount -ne 1 || $shortCount -ne 1 ]]; then
      if [ $includeCount -gt 5 ]; then
        echo "Too many #includes in bags.cpp." >> results.txt
      elif [ $intCount -ne 1 ]; then
        echo "More than two integer variables (including argc) in bags.cpp." >> results.txt
       else 
        echo "More than one short in bags.cpp" >> results.txt
      fi
    else #
      includeCount=`egrep '^#include *(<fstream>|<iostream>|<.*stdlib|"Stack|"Queue)' bags.cpp | wc -l`
      
      if [ $includeCount -ne 5 ]; then
        echo "<fstream>, <iostream>, stdlib, Stack, or Queue not #included in bags.cpp" >> results.txt
      else
        echo "bags25.dat w/1 bag"  
        echo "bags25.dat w/1 bag:" >> results.txt
        (a.out bags25.dat 1 | head > bagtest1.txt)&
        sleep 1
        pkill a.out
        diff --ignore-all-space bagtest1.txt $testerDirectory/bagtest1.txt > tempdiff
        if [ ! -s tempdiff ]; then
          echo OK >> results.txt
          (( BagsScore += 2 )) 
        else
          echo "Yours:" >> results.txt
          cat bagtest1.txt >> results.txt
          echo "Seans:" >> results.txt
          cat $testerDirectory/bagtest1.txt >> results.txt
        fi # if matches Seans

        echo "bags25.dat w/5"
        echo "bags25.dat w/5 bag:" >> results.txt
        (a.out bags25.dat 5 | head > bagtest2.txt)&
        sleep 1
        pkill a.out
        diff --ignore-all-space bagtest2.txt $testerDirectory/bagtest2.txt > tempdiff
        if [ ! -s tempdiff ]; then
          echo OK >> results.txt
          (( BagsScore += 2 ))
        else
          echo "Yours:" >> results.txt
          cat bagtest1.txt >> results.txt
          echo "Seans:" >> results.txt
          cat $testerDirectory/bagtest2.txt >> results.txt
        fi # if matches Seans

        echo "bags37.dat w/7"
        echo "bags37.dat w/7 bag:" >> results.txt
        (a.out bags37.dat 7 | head > bagtest3.txt)&
        sleep 1
        pkill a.out
        diff --ignore-all-space bagtest3.txt $testerDirectory/bagtest3.txt > tempdiff
        if [ ! -s tempdiff ]; then
          echo OK >> results.txt
          (( BagsScore += 2 ))
        else
          echo "Yours:" >> results.txt
          cat bagtest3.txt >> results.txt
          echo "Seans:" >> results.txt
          cat $testerDirectory/bagtest3.txt >> results.txt
        fi # if matches Seans

        echo "bags100.dat w/9"
        echo "bags100.dat w/9 bag:" >> results.txt
        (a.out bags100.dat 9 | head > bagtest4.txt)&
        sleep 1
        pkill a.out
        diff --ignore-all-space bagtest4.txt $testerDirectory/bagtest4.txt > tempdiff
        if [ ! -s tempdiff ]; then
          echo OK >> results.txt
          (( BagsScore += 2 ))
        else
          echo "Yours:" >> results.txt
          cat bagtest4.txt >> results.txt
          echo "Seans:" >> results.txt
          cat $testerDirectory/bagtest4.txt >> results.txt
        fi # if matches Seans

        echo "bags100.dat w/75"
        echo "bags100.dat w/75 bag:" >> results.txt
        (a.out bags100.dat 75 | head > bagtest5.txt)&
        sleep 1
        pkill a.out
        diff --ignore-all-space bagtest5.txt $testerDirectory/bagtest5.txt > tempdiff
        if [ ! -s tempdiff ]; then
          echo OK >> results.txt
          (( BagsScore += 2 ))
        else
          echo "Yours:" >> results.txt
          cat bagtest5.txt >> results.txt
          echo "Sean's:" >> results.txt
          cat $testerDirectory/bagtest5.txt >> results.txt
        fi # if matches Seans
        echo " " >> results.txt
      fi # missing #include
    fi  # if more than 4 #includes 
  else
    echo bags.cpp does not compile.  >> results.txt
  fi # if a.out
else
  echo No bags.cpp >> results.txt
fi  # if bags.cpp



rm a.out &> /dev/null

if [ ! -e balance.cpp ]; then
  echo "balance.cpp does not exist."  >> results.txt
else
  g++ balance.cpp &> /dev/null
  STLCount=`egrep '#include.*<( *string|.*(vector|queue|stack|list|deque|map|set))' balance.cpp | wc -l`

  if [[ ! -e a.out || $STLCount -ne 0 ]]; then # a.out not found
    echo "balance.cpp does not compile, or you used the STL!"  >> results.txt
  else
    fileNum=1
    echo balance.cpp operation testing:  >> results.txt

    while [[ $fileNum -lt 6 ]]; do
      echo balance$fileNum.txt  1>&2
      echo "balance$fileNum.txt: " >> results.txt
      rm -f balancetest$fileNum.txt &> /dev/null
      (a.out $testerDirectory/balance$fileNum.txt > balancetest$fileNum.txt )&
      sleep 1
      pkill a.out &> /dev/null

      diff --ignore-all-space balancetest$fileNum.txt $testerDirectory/balancetest$fileNum.txt > tempdiff
      if [ ! -s tempdiff ]; then
        echo OK >> results.txt
          (( BalanceScore += 2 ))
      else
        echo "Yours:" >> results.txt
        cat balancetest$fileNum.txt >> results.txt
        echo "Sean's:" >> results.txt
        cat $testerDirectory/balancetest$fileNum.txt >> results.txt
      fi # if matches Sean's

      (( fileNum++ ))
    done  # while less than 6
  fi # if balance.cpp a.out
fi # if balance.cpp exists

rm -f a.out core &> /dev/null

echo -e "\ntimetest.cpp score: $TTScore, bags.cpp score: $BagsScore, balance.cpp score: $BalanceScore" >> results.txt 
FinalScore=$(( $TTScore + $BagsScore + $BalanceScore ))
echo "Total score: $FinalScore" >> results.txt

# mailx -s "ECS 60 P1 Test Results" `cat addresses` < results.txt

#awk 'NR == 1 {printf"%s,", $0}' names.txt >> ../results.csv
# echo " ${1%%/}, $BSTScore, $HashScore, $FinalScore" >> ../results.csv
# authorCount=$(grep "@" authors.txt | wc -l)

#if [ $authorCount -gt 1 ]; then
#  awk 'NR == 2 {printf"%s,", $0}' names.txt >> ../results.csv
#  echo "${1%%/}, $BSTScore, $HashScore, $FinalScore" >> ../results.csv
# fi
